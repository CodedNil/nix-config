(defvar primary_width 40)

(defwidget bar []
  (box :orientation "v"
    (box :orientation "v"
      :class "segment"
      :valign "center"
      :space-evenly false
      :spacing "30"
      (workspaces)
      (time)
      (music)
      (systray :orientation "v" :icon-size 20 :spacing 5)
      (date)
      (power))))


(defwidget workspaces []
  (box
    :orientation "h"
    :spacing 5
    :halign "center"
    (box
      :orientation "v"
      :spacing 0
      (for wsp in {workspaces_1}
        (button :class "workspace-button ${wsp.focused ? "focused" : "unfocused"} ${wsp.active ? "active" : "inactive"} ${wsp.occupied ? "occupied" : "empty"}"
          :onclick "niri msg action focus-workspace ${wsp.name}"
        {wsp.occupied ? "◆" : "◇"})))
    (box
      :orientation "v"
      :spacing 0
      (for wsp in {workspaces_2}
        (button :class "workspace-button ${wsp.focused ? "focused" : "unfocused"} ${wsp.active ? "active" : "inactive"} ${wsp.occupied ? "occupied" : "empty"}"
          :onclick "niri msg action focus-workspace ${wsp.name}"
        {wsp.occupied ? "◆" : "◇"})))
  ))
(defvar workspaces_1 "")
(defvar workspaces_2 "")


(defwidget time []
  (box :orientation "v"
    :class "time"
    (label :class "hour" :text hour)
    (label :class "min" :text min)
    (label :class "sec" :text sec)))
(defpoll hour :interval "1s" "date +%H")
(defpoll min  :interval "1s" "date +%M")
(defpoll sec  :interval "1s" "date +%S")


(defwidget date []
  (box :orientation "v"
    :halign "center"
    :class "date"
    (label :class "day-word" :text day_word)
    (label :class "day" :text day)
    (label :class "month" :text month)))
(defpoll day_word :interval "10m" "date +%a | tr [:lower:] [:upper:]")
(defpoll day      :interval "10m" "date +%d")
(defpoll month    :interval "1h"  "date +%b | tr [:lower:] [:upper:]")


(defwidget music []
  (box :class "music"
    :orientation "v"
    :space-evenly false
    :spacing "10"
    :valign "center"
    (eventbox :class "music-art"
      :width primary_width
      :height primary_width
      :style "background-image: url('${music_cover}');"
      :onclick "playerctl play-pause"
      :onscroll "if [ '{}' == 'up' ]; then playerctl next; else playerctl previous; fi"
    )
    (scale :class "progress-horizontal green"
      :orientation "h"
      :min 0
      :max music_length
      :onchange "playerctl position {}"
      :width primary_width
      :height 10
      :value music_position
    )
    (scale :class "progress-horizontal"
      :orientation "h"
      :min 0
      :max 101
      :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ $(echo \"scale=2; {}/100\" | bc)"
      :height 10
      :value volume
      :valign "fill"
    )
  ))
(defvar volume "")
(defvar music_cover "")
(defvar music_position "")
(defvar music_length "")


(defwidget power []
  (eventbox
    :onhover "eww update power=true"
    :onhoverlost "eww update power=false"
    (box
      :orientation "v"
      :space-evenly "false"
      :vexpand "false"
      :spacing "10"
      
      (revealer	:transition "slideup"
        :reveal power
        :duration "550ms"
        (box
          :orientation "v"
          :space-evenly "false"
          :spacing "10"
          
          (button
            :class "power-button"
            :tooltip "Logout"
            :onclick "niri msg quit"
            (image :path "./icons/lock.svg"))
          
          (button
            :class "power-button"
            :tooltip "Reboot"
            :onclick "reboot"
            (image :path "./icons/reboot.svg"))
        ))
      
      (button
        :class "power-button"
        :tooltip "Shutdown"
        :onclick "shutdown now"
        (image :path "./icons/shutdown.svg")))))
(defvar power false)


(defwidget niri-scroller []
  (eventbox :onscroll "if [ '{}' == 'down' ]; then niri msg action focus-column-right; else niri msg action focus-column-left; fi"
    :vexpand true
    :valign "fill"
    :style "background-color:rgba(142, 192, 124, 0); border-radius: 10px;"))


(defwindow niri_scroller
  :monitor "LG TV SSCR2"
  :stacking "fg"
  :geometry (geometry :x 0 :y 0 :width "1600px" :height "12px" :anchor "bottom center")
  :reserve (struts :distance "10px" :side "bottom")
  :exclusive false
  (niri-scroller))

(defwindow bar
  :monitor "ARZOPA"
  :stacking "fg"
  :geometry (geometry :x 4 :y 0 :width "40px" :height "100%" :anchor "left center")
  (bar))
